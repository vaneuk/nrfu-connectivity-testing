# Ansible playbook to establish passwordless SSH login to remote hosts.
#
# https://github.com/ilias-sp/ansible-setup-passwordless-ssh
#
# 
# fill in your environment information in the hosts file:
# 
# ssh_key_filename: the filename of the SSH key to be generated
# ansible_user: the username of the remote host that you want to login as
# ansible_password: the password of that user on the remote host. Assuming you are attempting to run this to multiple hosts, the users exists to all machines and have the same password
# [ansible_setup_passwordless_setup_group]: add the list of remote hosts you want to enable the passwordless login.
# 
# 
# 
# run the playbook as:
#
# ansible-playbook -i hosts ansible_setup_passwordless_ssh.yml
#
#
# 
---
- hosts: local_host
  gather_facts: false
  vars_prompt:
  - name: confirmation
    prompt: "Type 'YES' to establish passwordless login to the remote hosts:"
    default: 'NO'
    private: no
    when: confirmation != "YES"
  pre_tasks:
  - name: "Check Confirmation"
    fail: msg="Exiting... You must type 'YES' to continue."
    when: confirmation != "YES"

  tasks:
    - name: check .ssh local directory exists
      stat:
        path: "~/.ssh"
      register: ssh_directory_exists_check

    # - debug:
    #     var: ssh_directory_exists_check

    - name: Check needed OS tools exist
      shell: which sshpass ssh-keygen ssh-copy-id
      register: os_tools_exist
      ignore_errors: true

    - name: Fail execution if any of the needed OS tools is missing
      fail:
        msg: "One or more of the: sshpass, ssh-keygen, ssh-copy-id are missing on this machine. Please install them - using your distribution's recommended method - before continuing."
      when: os_tools_exist.rc != 0

    - name: create ~/.ssh local directory
      file:
        path: "~/.ssh"
        state: directory
        mode: "0700"
      register: ssh_directory_creation
      when: ssh_directory_exists_check is defined and ssh_directory_exists_check.stat.exists == false

    # - debug:
    #     var: ssh_directory_creation

    - name: check .ssh key file exists
      stat:
        path: "~/.ssh/{{item}}"
      register: ssh_key_file_exists_check
      with_items:
        - "{{ssh_key_filename}}"
        - "{{ssh_key_filename}}.pub"

    # - debug:
    #     var: ssh_key_file_exists_check.results[1].stat.exists

    - name: generate ssh key on local machine
      shell: "ssh-keygen -t rsa -f ~/.ssh/{{ssh_key_filename}} -P \"\""
      register: ssh_key_creation
      failed_when: ssh_key_creation.rc != 0
      when: ssh_key_file_exists_check is defined and ssh_key_file_exists_check.results[0].stat.exists == false and ssh_key_file_exists_check.results[1].stat.exists == false

    # - debug:
    #     var: ssh_key_creation

    - name: check .ssh/config file exists
      stat:
        path: "~/.ssh/config"
      register: ssh_config_file_exists_check

    # - debug:
    #     var: ssh_config_file_exists_check

    - name: create the ~/.ssh/config file
      file:
        path: "~/.ssh/config"
        state: touch
        mode: "0644"
      register: ssh_config_file_creation
      when: ssh_config_file_exists_check is defined and ssh_config_file_exists_check.stat.exists == false

    - name: add the new ssh key to the ~/.ssh/config file
      lineinfile:
        path: "~/.ssh/config"
        line: "IdentityFile ~/.ssh/{{ssh_key_filename}}"
        state: present
        backup: yes
      register: ssh_config_file_key_addition

    # - debug:
    #     var: ssh_config_file_key_addition

    - name: distribute the ssh key to the remote hosts
      shell: "/usr/local/bin/sshpass -p \"{{ansible_password}}\" ssh-copy-id -o StrictHostKeyChecking=no -i ~/.ssh/{{ssh_key_filename}}.pub -p {{ hostvars[item].ansible_port }} \"{{ansible_user}}@{{ hostvars[item].ansible_host }}\""
      register: ssh_copy_id_execution
      with_items: 
        - "{{ groups['all']}}"
      failed_when: ssh_copy_id_execution.rc != 0

    # - debug:
    #     var: ssh_copy_id_execution

- hosts: all
  gather_facts: false
  
  tasks:
    - name: check ssh to remote hosts works
      shell: "hostname; id"
      register: ssh_connection_test
      failed_when: ssh_connection_test.rc != 0

    - name: print the connectivity test results
      debug:
        var: ssh_connection_test.stdout_lines